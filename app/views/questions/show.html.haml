= include_latex

/- question_body = find_and_preserve(shapado_auto_link(markdown(@question.body.present? ? @question.body : @question.title)))

-cache_for(:question, @question.id, @question.user == current_user ? "owner" : "" ) do
  %section#question{:class => "main-question #{@question.id}", :item_scope => '', :itemtype => "http://schema.org/Article"}
    .author
      %p
        %span
          = I18n.t('global.by_semi')
        = render :partial => "users/user_mini", :locals => {:user => @question.user, :author => true}
        %span
          = t('posted')
        %time{:datetime => @question.created_at.iso8601, :itemprop => "datePublished"}
          = t("time.ago", :time => time_ago_in_words(@question.created_at))
        -if !@question.user.hide_country && @question.address.present?
          %span
            = t("global.from", :site => CGI.escape_html(@question.address_name))

    %h1{:itemprop => "name"}
      = @question.title
      - if @question.closed
        =" [#{t("closed", :scope => "activerecord.attributes.question").upcase}]"

    .description.markdown
      %div{:itemprop => "articleBody"}
        = raw @question.body
      /= render "reward_info"
      = render "attachments", :question => @question, :attachments => @question.attachments, :editing => false
      .clear

    .stats
      %p
        /= link_to t("questions.answer.add_comment"), "#", :class => "reply Question-commentable", 'data-commentable' => @question.id
        %span
          = t('questions.show.viewed')
        = t('number.x_time', :count => number_with_delimiter(@question.views_count))
        %span
          = t("questions.show.last_activity")
        = t("time.ago", :time => time_ago_in_words(@question.activity_at))

    -#.comments
      =link_to "NN comments", "#", :class => "toggle_comments"
      -@question.comments.each do |comment|
        -read = (@last_read_at && @last_read_at > comment.created_at && comment.votes_average < 2)
        = render :partial => "comments/comment", :object => comment, :locals => {:source => question_path(@question), :mini => true, :read => read}

    -#.panel-comments
      = form_for [@question, @comment ||= Comment.new], :html => {:class => "question_comment_form nestedAnswerForm", "data-commentable" => @question.id} do |f|
        %fieldset
          = render :partial => "comments/form", :locals => {:f => f, :commentable => @question, :source => question_url(@question), :markdown => true}
          .buttons
            = submit_tag t("comments.shared.comment_submit")
            = t("global.or")
            = link_to t('scaffold.cancel'), '', :class => 'cancel cancel_comment'

    %ul.tag-list
      %li.title
        = t('global.tags_label')
      - @question.tags.each do |tag|
        %li
          = tag_link(tag)
